<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rcpp | Wush筆記]]></title>
  <link href="http://wush978.github.com/blog/categories/rcpp/atom.xml" rel="self"/>
  <link href="http://wush978.github.com/"/>
  <updated>2013-01-29T15:52:20+08:00</updated>
  <id>http://wush978.github.com/</id>
  <author>
    <name><![CDATA[Wush978]]></name>
    <email><![CDATA[wush.978@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Eclipse CDT to develop Rcpp Package]]></title>
    <link href="http://wush978.github.com/blog/2013/01/29/using-eclipse-cdt-to-develop-rcpp-package/"/>
    <updated>2013-01-29T15:16:00+08:00</updated>
    <id>http://wush978.github.com/blog/2013/01/29/using-eclipse-cdt-to-develop-rcpp-package</id>
    <content type="html"><![CDATA[<p>Rstudio is great, but it lacks some useful features for C/C++ provided
by modern IDE such as tracing. Eclipse CDT is a good choice, but it is
complicated to setup the project correctly.</p>

<p>I just wrote a cmake script to generate Eclipse CDT project for
developing Rcpp package.</p>

<h1>Environment</h1>

<ul>
<li>CMake >= 2.8.7</li>
<li>Eclipse >= 3.7</li>
<li>Eclipse CDT >= 1.4.2</li>
<li>R >= 2.15</li>
<li>Rcpp >= 0.10</li>
</ul>


<h1>Configuration</h1>

<ul>
<li><p>Download FindLibR.cmake from <a href="https://github.com/rstudio/rstudio/blob/master/cmake/modules/FindLibR.cmake">github</a>
provided by Rstudio</p></li>
<li><p>Generate Rcpp package, for example</p></li>
</ul>


<p><code>r
library(Rcpp)
Rcpp.package.skeleton("RcppPackage")
</code></p>

<ul>
<li>Put the following file, named <em>CMakeLists.txt</em> in the generated folder
such as <code>RcppPackage</code> in the previous example</li>
</ul>


<p>```cmake CMakeLists.txt
cmake_minimum_required(VERSION 2.8)
project(RcppPackage)
find_package(LibR)
if(${LIBR_FOUND})
else()</p>

<pre><code>message(FATAL_ERROR "No R...")
</code></pre>

<p>endif()
message(STATUS ${CMAKE_SOURCE_DIR})
execute_process(</p>

<pre><code>COMMAND ${LIBR_EXECUTABLE} "--slave" "-e" "stopifnot(require('Rcpp'));cat(Rcpp:::Rcpp.system.file('include'))"
OUTPUT_VARIABLE LIBRCPP_INCLUDE_DIRS
) 
</code></pre>

<p>include_directories(BEFORE ${LIBR_INCLUDE_DIRS})
message(STATUS ${LIBR_INCLUDE_DIRS})
include_directories(BEFORE ${LIBRCPP_INCLUDE_DIRS})
message(STATUS ${LIBRCPP_INCLUDE_DIRS})
add_custom_target(RcppPackage ALL</p>

<pre><code>COMMAND find ${CMAKE_SOURCE_DIR} -name "*.o" -exec rm "{}" "\;"
COMMAND find ${CMAKE_SOURCE_DIR} -name "*.so" -exec rm "{}" "\;"
COMMAND ${LIBR_EXECUTABLE} "--slave" "-e" "\"stopifnot(require(roxygen2));roxygenize('${CMAKE_SOURCE_DIR}',roclets=c('rd','collate','namespace'))\""
COMMAND ${LIBR_EXECUTABLE} CMD INSTALL "${CMAKE_SOURCE_DIR}")
</code></pre>

<p>```</p>

<ul>
<li><p>Customize CMakeLists.txt such <code>roxygenize</code> and <code>R CMD INSTALL</code></p></li>
<li><p>Generate project with cmake</p></li>
</ul>


<p><code>sh
mkdir build # don't create subdirectory of RcppPackage
cd build
cmake -G "Eclipse CDT4 - Unix Makefiles" &lt;path to RcppPackage&gt; -DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE
</code></p>

<ul>
<li><p>Open eclipse and import project from <code>build</code>(See <a href="http://www.vtk.org/Wiki/Eclipse_CDT4_Generator">cmake-eclipse-cdt</a> for example).
After indexing, enjoy several convenient features provided by Eclipse CDT
such as tracing and autocomplete.</p></li>
<li><p>You can build the project which will be converted to <code>R CMD INSTALL</code> or
anything in the <em>CMakeLists.txt</em>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xts and Rcpp]]></title>
    <link href="http://wush978.github.com/blog/2013/01/11/xts-and-rcpp/"/>
    <updated>2013-01-11T14:54:00+08:00</updated>
    <id>http://wush978.github.com/blog/2013/01/11/xts-and-rcpp</id>
    <content type="html"><![CDATA[<p>Here is my guideline to integrate xts with Rcpp in a R package.</p>

<p>Because the <code>xts_API</code> is written for c language, so we need to hack
somethings to make it work with c++.</p>

<h1>Modify <code>DESCRIPTION</code></h1>

<p><code>sh
Depends: xts, Rcpp
linkingTo: xts, Rcpp
</code></p>

<h1>Create files in <code>src</code> directory</h1>

<p>```c xts_api.c</p>

<h1>include &lt;xts.h></h1>

<h1>include &lt;xts_stubs.c></h1>

<p>```</p>

<p>```cpp xts_api.h
extern "C" {</p>

<h1>define class xts_class</h1>

<h1>include &lt;xts.h></h1>

<h1>undef class</h1>

<p>}</p>

<p>inline SEXP install(const char* x) {
  return Rf_install(x);
}</p>

<p>inline SEXP getAttrib(SEXP a, SEXP b) {
  return Rf_getAttrib(a, b);
}</p>

<p>inline SEXP setAttrib(SEXP a, SEXP b, SEXP c) {
  return Rf_setAttrib(a, b, c);
}
```</p>

<p>Without the macro, there will be  compile time error:
<code>
error: expected identifier before ‘)’ token
</code>
because <code>xts.h</code> use the keyword <code>class</code>.</p>

<p>Without the inline functions, there will be some compile time errors:
<code>
error: ‘install’ was not declared in this scope
error: ‘getAttrib’ was not declared in this scope
</code></p>

<p>Now, almost all API could be invoked in c++:</p>

<p>```cpp rcpp_test.cpp</p>

<h1>include &lt;Rcpp.h></h1>

<h1>include "xts_api.h"</h1>

<p>using namespace Rcpp;</p>

<p>RcppExport SEXP get_xts_index(SEXP x) {
  BEGIN_RCPP</p>

<p>  return GET_xtsIndex(x);</p>

<p>  END_RCPP
}
```</p>

<p>except <code>SET_xtsIndexClass(x, value)</code>:</p>

<p><code>sh compile time error
error: ‘xts_IndexvalueSymbol’ was not declared in this scope
</code></p>

<p>I guess that we should replace <code>xts_IndexvalueSymbol</code> with <code>xts_IndexClassSymbol</code></p>

<h2>Reference</h2>

<ul>
<li><code>file.show(system.file('api_example/README', package="xts"))</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RcppArmadillo]]></title>
    <link href="http://wush978.github.com/blog/2012/08/21/rcpparmadillo/"/>
    <updated>2012-08-21T20:08:00+08:00</updated>
    <id>http://wush978.github.com/blog/2012/08/21/rcpparmadillo</id>
    <content type="html"><![CDATA[<h1>Inroduction</h1>

<p>Recently I am exploring the linear algebra features provided in <a href="http://arma.sourceforge.net/">Armadillo</a> through <a href="http://dirk.eddelbuettel.com/code/rcpp.armadillo.html">RcppArmadillo</a>.</p>

<p>Here is the note for myself.</p>

<p>Note these functions are only my understanding of these operators and methods. I didn't check the source code of Armadillo and RcppArmadillo.</p>

<h1>Basic Elements and Methods</h1>

<p>``` cpp mat
arma::mat a(5, 5); // Initialize a 5 x 5 matrix.</p>

<p>a.fill(0); // fill it with 0
a.n_rows;    //!&lt; number of rows in the matrix (read-only)
a.n_cols;    //!&lt; number of columns in the matrix (read-only)
a.n_elem;    //!&lt; number of elements in the matrix (read-only)
a.vec_state; //!&lt; 0: matrix layout; 1: column vector layout; 2: row vector layout
a.mem;       //!&lt; pointer to memory used by the matrix (memory is read-only)</p>

<p>a.min();
a.max();
```</p>

<h1>Feature</h1>

<h2>Matrix Multiplication</h2>

<p><code>cpp Matrix Multiplication
const arma::mat operator*(const arma::mat&amp; x, const arma::mat&amp; y);
</code></p>

<h2>Transpose</h2>

<p>``` cpp Transpose
const arma::mat arma::trans(const arma::mat&amp; x);</p>

<p>// Methods of class arma::mat
// x.t() = arma::trans(x)
const arma::mat arma::mat::t();
```</p>

<h2>Inverse</h2>

<p><code>cpp Inverse
const arma::mat arma::pinv(const arma::mat&amp; x);
</code></p>

<h2>Sum of Square</h2>

<p>``` cpp Sum of Square
inline double sumOfSquare(arma::vec&amp; x) {</p>

<pre><code>return std::inner_product(x.begin(), x.end(), x.begin(), 0.0);
</code></pre>

<p>}
```</p>

<h2>Diagonal Vector</h2>

<p><code>cpp Diagonal Vector
const arma::colvec arma::diagvec(const arma::mat&amp; x);
</code></p>

<h2>Linear Regression</h2>

<p>``` cpp Linear Regression
/<em>*
 * @param X    the explanatory variables
 * @param y    the response variable
 * @return     the vector of regression coefficients
 </em>/
const arma::colvec arma::solve(const arma::mat&amp; X, const arma::vec&amp; y);</p>

<p>// Residuals
arma::colvec residuals = y - X * coef;</p>

<p>// Residual Sum of Square
double s2 = sumOfSquare(residuals);</p>

<p>// Std of Coef.
arma::colvec sderr = arma::sqrt(s2 *</p>

<pre><code>arma::diagvec(arma::pinv(arma::trans(X)*X)));
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
