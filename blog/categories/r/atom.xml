<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: R | Wush筆記]]></title>
  <link href="http://wush978.github.com/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://wush978.github.com/"/>
  <updated>2012-06-04T15:21:54+08:00</updated>
  <id>http://wush978.github.com/</id>
  <author>
    <name><![CDATA[Wush978]]></name>
    <email><![CDATA[wush.978@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rcpp-2]]></title>
    <link href="http://wush978.github.com/blog/2012/06/04/rcpp-2/"/>
    <updated>2012-06-04T13:56:00+08:00</updated>
    <id>http://wush978.github.com/blog/2012/06/04/rcpp-2</id>
    <content type="html"><![CDATA[<p>本文延續<a href="/blog/2012/02/28/rcpp/">Rcpp-1</a>。</p>

<h1>從R傳遞資料到C++</h1>

<h2>傳遞到對應的物件</h2>

<h3>Vector</h3>

<p>在R的底層之中，最基礎的資料型態就是某六種型態的向量(詳情請見下表)。傳遞這六種資料型態的向量到C++並不難，只要宣告對應的Rcpp class以及把透過<code>.Call</code>傳遞進來的SEXP丟到Rcpp class的constructor內就好了。</p>

<p>ps. 在R中，幾乎所有物件都是向量</p>

<table>
<thead>
<tr>
<th>atomic type</th>
<th>Rcpp Class</th>
</tr>
</thead>
<tbody>
<tr>
<td>logical</td>
<td>LogicalVector</td>
</tr>
<tr>
<td>integer</td>
<td>IntegerVector</td>
</tr>
<tr>
<td>double</td>
<td>NumericVector</td>
</tr>
<tr>
<td>complex</td>
<td>ComplexVector</td>
</tr>
<tr>
<td>character</td>
<td>CharacterVector</td>
</tr>
<tr>
<td>raw</td>
<td>RawVector</td>
</tr>
</tbody>
</table>


<p>以<code>integer</code>為例子:</p>

<p>``` cpp test-rcpp.cpp</p>

<h1>include &lt;Rcpp.h></h1>

<p>using namespace Rcpp;</p>

<p>RcppExport SEXP R2CppInteger(SEXP RIntegerVec);</p>

<p>SEXP R2CppInteger(SEXP r_int_vec) {</p>

<pre><code>IntegerVector int_vec(r_int_vec);
for (R_len_t i(0);i &lt; int_vec.length();i++) {
    Rprintf("%d ", int_vec[i]);
}
Rprintf("\n length: %d \n", int_vec.length());
return R_NilValue;
</code></pre>

<p>}</p>

<p>```</p>

<p>編譯後，在R底下執行</p>

<p><code>r test.R
dyn.load("test-rcpp.so")
a &lt;- 1L:10L
.Call("R2CppInteger", a)
dyn.unload("test-rcpp.so")
</code></p>

<p>就會看到輸出</p>

<pre><code>1 2 3 4 5 6 7 8 9 10 
 length: 10 
NULL
</code></pre>

<p>如果需要使用上的細節，只需要查閱<a href="http://dirk.eddelbuettel.com/code/rcpp/html/classVector.html">Rcpp Reference中關於Vector</a>的部分。</p>

<p>而Rcpp還有許多可以直接傳遞其他進階的R物件的C++物件。</p>

<h3>Matrix</h3>

<p>所有上述的xxxVector物件也都有xxxMatrix物件。使用上也非常類似。只是要注意，在C++裡面取出來的row或column在C++裡的型態會是<code>Rcpp::xxxMatrix::Row</code>或<code>Rcpp::xxxMatrix::Column</code>。</p>

<p>``` r test-rcpp.cpp</p>

<h1>include &lt;Rcpp.h></h1>

<p>using namespace Rcpp;</p>

<p>RcppExport SEXP R2CppInteger(SEXP RIntegerVec);</p>

<p>SEXP R2CppInteger(SEXP r_int_mat) {</p>

<pre><code>IntegerMatrix int_mat(r_int_mat);
Rprintf("print the matrix\n");
for(int i(0);i &lt; int_mat.nrow();i++) {
    for(int j(0);j &lt; int_mat.ncol();j++) {
        Rprintf("%d ", int_mat(i, j));
    }
    Rprintf("\n");
}
Rprintf("print the first column: ");
IntegerMatrix::Column int_mat_col( int_mat(internal::NamedPlaceHolder(), 0 ) );
for(int i(0);i &lt; int_mat.nrow();i++) {
    Rprintf("%d ", int_mat_col[i]);
}
Rprintf("\n");
return R_NilValue;  
</code></pre>

<p>}
```</p>

<p>編譯之後在R底下執行
<code>r
dyn.load("test-rcpp.so")
a &lt;- matrix(1L:10L, 2, 5)
.Call("R2CppInteger", a)
dyn.unload("test-rcpp.so")
</code></p>

<p>就可以看到輸出</p>

<pre><code>print the matrix
1 3 5 7 9 
2 4 6 8 10 
print the first column: 1 2 
NULL
</code></pre>

<h3>List</h3>

<h3>data.frame</h3>

<h2>傳遞到STL物件</h2>

<h1>參考資料</h1>

<ul>
<li><a href="http://cran.r-project.org/doc/manuals/R-lang.html#Vector-objects">R Language Definition</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R: DateTime格式的心得]]></title>
    <link href="http://wush978.github.com/blog/2012/02/29/rdatetime/"/>
    <updated>2012-02-29T21:53:00+08:00</updated>
    <id>http://wush978.github.com/blog/2012/02/29/rdatetime</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#overview">概述</a></li>
<li><a href="#functions">函數心得</a>

<ul>
<li>取得當前的時間

<ul>
<li><a href="#Sys.time">Sys.time</a></li>
<li><a href="#Sys.Date">Sys.Date</a></li>
</ul>
</li>
<li>時間格式間的轉換

<ul>
<li><a href="#mktime">mktime</a></li>
<li><a href="#localtime">localtime</a></li>
<li><a href="#gmtime">gmtime</a></li>
</ul>
</li>
<li>時間和字串間的轉換

<ul>
<li><a href="#strftime">strftime</a></li>
<li><a href="#strptime">strptime</a></li>
</ul>
</li>
<li><a href="#trunc">trunc</a></li>
</ul>
</li>
<li><a href="#reference">參考資料</a></li>
</ul>


<hr />

<h2 id="overview"> 概述 </h2>


<p>R中主要的時間物件為<code>POSIXct</code>和<code>POSIXlt</code>。[Date-Time Classes]第8頁內提到設計者們在設計這類物件的考量：</p>

<ul>
<li>日期格式應該由[locale]參數來決定。</li>
<li>時間應該由電腦的Time zones來決定。</li>
<li>參考資料庫標準(SQL99 ISO)中使用的時間格式<code>timestamp with time zone</code></li>
<li>考量到跨平台，使用[POSIX]</li>
</ul>


<p>[POSIX]是以<a href="Coordinated%20Universal%20Time">UTC</a>為基準，以c語言的<code>double</code>型態來儲存的時間格式，
而<code>POSIXct</code>則是代表以這種絕對座標所表示的時間。<code>POSIXlt</code>則是另一種包含timezones的格式
(lt代表local time)。其中timezone是以屬性tzone來代表的。</p>

<p>以以下的程式碼為例：
``` rout example from [Date-Time Classes]</p>

<blockquote><p>file.info(dir())[, "mtime", drop=FALSE]
data                  2012-02-29 21:18:11
<code>
在預設下，是以ISO標準格式來表示日期時間。
</code> r example from [Date-Time Classes]
file_time &lt;- file.info(dir())[, "mtime", drop=FALSE]
file_time
data                  2012-02-29 21:18:11
format(file_time, format="%x %X")
data                  2012/2/29 下午 09:18:11
```</p></blockquote>

<p>另外再列了幾個[Date-Time Classes]內的範例</p>

<h2 id="functions"> 函數心得 </h2>




<h3 id="Sys.time"> Sys.time </h3>


<p><code>r Sys.time
function ()
</code>
回傳<code>POSIXct</code>物件來表示現在的時間</p>

<h3 id="Sys.Date"> Sys.Date</h3>


<p><code>r Sys.time
function () {as.Date(as.POSIXlt(Sys.time()))}
</code>
回傳<code>Date</code>物件來表示現在的日期</p>

<h3 id="trunc"> trunc </h3>


<p><code>r trunc.POSIXt
function (x, units = c("secs", "mins", "hours", "days"), ...)
</code>
將<code>x</code>的時間格式轉換為以<code>units</code>為單位</p>

<h2 id="reference"> 參考資料 </h3>

[Date-Time Classes]: http://www.r-project.org/doc/Rnews/Rnews_2001-2.pdf
[locale]: http://en.wikipedia.org/wiki/Locale
[UTC]: http://en.wikipedia.org/wiki/Coordinated_Universal_Time

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rcpp-1]]></title>
    <link href="http://wush978.github.com/blog/2012/02/28/rcpp/"/>
    <updated>2012-02-28T15:42:00+08:00</updated>
    <id>http://wush978.github.com/blog/2012/02/28/rcpp</id>
    <content type="html"><![CDATA[<h1>Rcpp 心得 -- 簡介</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#background">背景知識</a></li>
<li><a href="#introduction">介紹</a></li>
<li><a href="#install">安裝</a></li>
<li><a href="#compile">編譯</a></li>
<li><a href="#reference">參考資料</a></li>
</ul>
</li>
</ul>


<hr />

<h2 id="overview"> 概述 </h2>




<h3 id="background"> 背景知識 </h3>


<p>就我所知，要能理解Rcpp的語法，你必須先對C++這個我個人認為最難學的語言先學到某種程度才行。根據<a href="http://www.amazon.com/Effective-Specific-Improve-Programs-Designs/dp/0321334876">Effective C++</a>的作者Scott Meyers的看法，C++其實是下列四種程式語言的集合(難怪很難，一個打四個!!):</p>

<ul>
<li>C的特性 (指標、陣列等等)</li>
<li>物件導向</li>
<li>STL 標準函式庫</li>
<li>Template</li>
</ul>


<p>Rcpp中大量的使用了後面三種，所以如果看不習慣Rcpp的使用者，可能得先回頭把C++後面三種的語法複習一下了。</p>

<h3 id="introduction"> 介紹 </h3>


<p><a href="http://dirk.eddelbuettel.com/code/rcpp.html">Rcpp</a> 是一個整合R和C++的library。
使用過R中的<code>.Call</code>函數的人一定會對於處理R和C之間資料結構的轉換感到很煩人，而Rcpp給我的第一個印象就是他把這些重複性很高的轉換給包起來了!所以在使用Rcpp時使用者不需要再去撰寫諸如以下的程式碼:</p>

<p>``` c return a R integer vector with R API</p>

<h1>include &lt;R.h></h1>

<h1>include &lt;Rdefines.h></h1>

<p>SEXP foo()
{</p>

<pre><code>SEXP retval;
PROTECT(retval = NEW_INTEGER(2));
INTEGER_POINTER(retval)[0] = 1;
INTEGER_POINTER(retval)[1] = 2;
UNPROTECT(1);
return retval;
</code></pre>

<p>}
```</p>

<p>在Rcpp中, 透過C++的物件導向和template語法可以用下列的語法得到相同的效果：</p>

<p>``` cpp return a R integer vector with Rcpp</p>

<h1>include &lt;Rcpp.h></h1>

<p>RcppExport SEXP foo()
{</p>

<pre><code>Rcpp::IntegerVector retval(2);
retval[0] = 1;
retval[1] = 2;
return Rcpp::wrap( retval );
</code></pre>

<p>}
```</p>

<p>比較上面兩段語法後，我基於以下的理由比較喜歡Rcpp的語法:</p>

<ol>
<li><p>Rcpp的語法比較簡潔。尤其是在比較<code>INTEGER_POINTER(retval)[0]</code>和<code>retval[0]</code>，
這種在真正寫功能時最常用到的語法，我比較喜歡使用後者。雖然你也可以再宣告一個指標:<code>int* retval_ptr = INTEGER_POINTER(retval)</code>
來達到類似的效果，但是對我來說, 明明都是代表<code>retval</code>這個物件，卻需要宣告兩個變數就是彆扭。</p></li>
<li><p>Rcpp可以使用更精確的型態。我認為比起<code>SEXP</code>或<code>NEW_INTEGER</code>，
<code>IntegerVector</code>是更清楚的，而且也更簡潔。除了<code>IntegerVector</code>外，Rcpp之中也定義了許許多多的型態，
甚至連<code>Matrix</code>、<code>Robj</code>(S4 object)和<code>environment</code>都有呢!</p></li>
<li><p>在物件導向的語法中我就可以依循<b>RAII(<a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">Resource Acquisition Is Initialization</a>)</b>的原則來寫code，
降低了memory leak等資源洩漏的可能，也免除了使用<code>PROTECT</code>、<code>UNPROTECT</code>的困擾。</p></li>
</ol>


<p>除了語法上吸引我之外，Rcpp還可以還可以和inline套件結合，直接在R內進行即時編譯；還可以和另一個套件sugar一起使用，再增加程式的執行效能。</p>

<h3 id="install"> 安裝 </h3>


<p>Rcpp的安裝非常簡單，和一般的R套件相同。有興趣的使用者還可以額外安裝inline或sugar來玩。
Windows的使用者請額外安裝能編譯R的工具庫: <a href="http://cran.r-project.org/bin/windows/Rtools/">Rtools</a> ，並且記得到Rcpp的目錄中不要包含空白，否則用R CMD SHLIB編譯的時候會有錯誤。</p>

<h3 id="compile"> 編譯 </h3>


<ol>
<li>使用inline，這也是最簡單的方式。以下是一個取自<a href="http://dirk.eddelbuettel.com/code/rcpp/Rcpp-FAQ.pdf">Frequently Asked Questions about Rcpp</a>的範例:</li>
</ol>


<p>``` r Compile with R package "inline"
fx &lt;- cxxfunction(signature( x = "numeric" ), '</p>

<pre><code>NumericVector xx(x);
return wrap( std::accumulate( xx.begin(), xx.end(), 0.0));',
plugin = "Rcpp")
</code></pre>

<p>res &lt;- fx( seq( 1, 10, by = 0.5 ) )
res
```</p>

<ol>
<li>使用R CMD SHLIB的話則需要調整compiler的參數。以下的範例是在bash底下執行，是透過修改環境變數的方式。</li>
</ol>


<p><code>bash Compile with R CMD SHLIB
export PKG_LIBS=$(Rscript -e "Rcpp:::LdFlags()")
export PKG_CXXFLAGS=$(Rscript -e "Rcpp::CxxFlags()")
R CMD SHLIB myfile.cpp
</code></p>

<ol>
<li>在R內呼叫Rcpp的函數<code>Rcpp:::SHLIB</code>來編譯。</li>
</ol>


<p><code>r Compile with Rcpp:::SHLIB
Rcpp:::SHLIB("mysource.cpp")
</code></p>

<p>在windows底下，方法2.我花了很久才測出來(網路上找到資料是說只要Rcpp和他的父目錄名稱有空白就會出錯)!後來我大部分是用方法1和3了。</p>

<h3 id="reference"> 參考資料 </h3>


<ul>
<li><a href="http://dirk.eddelbuettel.com/papers/Rcpp-introduction.pdf">Rcpp: Seamless R and C++ Interface</a></li>
<li><a href="http://dirk.eddelbuettel.com/code/rcpp/Rcpp-FAQ.pdf">Frequently Asked Questions about Rcpp</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
