<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: exception | Wush筆記]]></title>
  <link href="http://wush978.github.com/blog/categories/exception/atom.xml" rel="self"/>
  <link href="http://wush978.github.com/"/>
  <updated>2013-04-04T23:42:47+08:00</updated>
  <id>http://wush978.github.com/</id>
  <author>
    <name><![CDATA[Wush978]]></name>
    <email><![CDATA[wush.978@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R 錯誤處理]]></title>
    <link href="http://wush978.github.com/blog/2013/04/04/r-error-handling/"/>
    <updated>2013-04-04T11:00:00+08:00</updated>
    <id>http://wush978.github.com/blog/2013/04/04/r-error-handling</id>
    <content type="html"><![CDATA[<p>R 的官方文件在<a href="http://cran.r-project.org/doc/manuals/R-lang.html#Exception-handling">Exception handling</a>有介紹R的例外處理機制。</p>

<p>這裡我簡單介紹如何在R寫出類似java、c++或python等主流語言所使用的try-catch機制。</p>

<p>另外這裡講的都是以R2.15為主。</p>

<h1>錯誤相關的函數</h1>

<ul>
<li><code>warning(...)</code>: 拋出一個警告</li>
<li><code>stop(...)</code>: 拋出一個例外</li>
<li><code>surpressWarnings(expr)</code>: 忽略<code>expr</code>中發生的警告</li>
<li><code>try(expr)</code>: 嘗試執行</li>
<li><code>tryCatch</code>: 最主流語言例外處理的方法</li>
<li><code>conditionMessage</code> : 顯示錯誤訊息</li>
</ul>


<h1>R 和其他主流語言的不同</h1>

<p>R 語言處理例外的方式，是透過函數，而非像其他主流語言使用try ... catch ... 等語法。這是因為R 語言幾乎所有功能都是用函數來實作的。請參考<a href="https://github.com/hadley/devtools/wiki/Functions#every-operation-is-a-function-call">Every operation is a function call</a>。</p>

<h1>一個<code>try</code>的範例</h1>

<p>我自己最早是先發現<code>try</code>函數。<code>try</code>的用法近似於回傳expr的結果<em>或</em>執行時發生的錯誤。</p>

<p><code>r
result &lt;- try(..., silent=TRUE)
if (class(result) == "try-error") {
  ... # 錯誤處理
}
</code></p>

<p>由於R是我第一個語言，所以我也就接受他了。直到我後來發現主流語言的try -- catch機制後，才覺得奇怪。</p>

<h1>一個<code>tryCatch</code>的範例</h1>

<p>後來我發現<code>tryCatch</code>函式提供了比較類似try -- catch機制的錯誤處理方法。</p>

<p><code>r
tryCatch({
  result &lt;- expr
}, warning = function(w) {
  ... # 警告處理
}, error = function(e) {
  ... # 錯誤處理
}, finally {
  ... # 清理
}
</code></p>

<p>這種語法和其他主流語言的機制比起來接近多了。</p>

<h1><code>conditionMessage</code></h1>

<p>有時候當錯誤發生時，我無法處理，需要直接回傳錯誤訊息給使用者時，或是log起來時，我們可以在<code>tryCatch</code>中使用<code>conditionMessage</code>來擷取錯誤訊息。</p>

<p><code>r
tryCatch({
  stop("demo error")
}, error = function(e) {
  conditionMessage(e) # 這就會是"demo error"
})
</code></p>

<h1>錯誤處理的相關issue</h1>

<p>就我的經驗來說，寫出一個穩健的程式碼是非常不容易的。在軟體工程中有許多文章介紹如何寫出這類程式碼。</p>

<p>大部份R 寫出來的script都是只用一次的，所以程式穩定不穩定就不是重點，也因此大家都很少去使用R 的例外處理機制。</p>

<p>某些R 使用者，會需要寫出自動化的script。而這時候為了要讓迴圈不中斷，使用者才開始使用例外處理。</p>

<p>但是當寫到套件時，例外處理就很重要了。這時候，函數的使用者將不再是開發者自己，而還包括其他的使用者，甚至是其他的開發者。此時例外處理就變成一門哲學了。這部份我也只略懂皮毛，下面只列出少許我知道的issue:</p>

<ul>
<li>釋放資源: 由於錯誤發生時，函數會在不正常的地方退出，所以此時需要釋放一些函數中獲得的資源(如資料庫連線需要關閉)。這部份在C++可以用<a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a>等技術來保證資源不會被忘記釋放。然而在R中，我還不知道有什麼類似的安全機制。</li>
<li>exception safety guarantees: 當使用者要基於某些函數建立複雜的程式時，通常希望這些函式是不會出錯的。<a href="http://en.wikipedia.org/wiki/Exception_safety">Exception safety</a>就是在探討相關的issue。畢竟使用的函數有例外狀況時，原本的函數也跟著會有例外狀況。就像是蓋在危樓上的樓層，一定也很危險一樣。目前我也尚未看過R在這部份的功能。</li>
<li>錯誤訊息: 當錯誤發生時，提供的錯誤訊息是否能幫助使用者找到發生錯誤的理由。R在這部份也很不足，這造成要除錯R的程式時，沒有相當的經驗，是無法理解錯誤訊息的。</li>
</ul>


<h1>參考資料</h1>

<ul>
<li><a href="http://cran.r-project.org/doc/manuals/R-lang.html#Exception-handling">Exception handling</a></li>
<li><a href="http://mazamascience.com/WorkingWithData/?p=912">Using R — Basic error Handing with tryCatch()</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
